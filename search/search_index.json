{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AutowareV2X Documentation # About AutowareV2X # AutowareV2X is an open-source module that can be added onto the newest Autoware.universe to enable V2X communication. It utilizes Vanetza as the protocol suite for ETSI C-ITS standards. We have also provided a working example of a CPM application, where Collective Perception Messages can be used to exchange perception information in Autoware. Getting started # Installation pages explain the installation steps of AutowareV2X and its prerequisites. Tutorials pages provide several tutorials to follow after installation. Design pages explain the design concept and architecture of AutowareV2X. Support pages are the place to go if you need additional help.","title":"Introduction"},{"location":"#autowarev2x-documentation","text":"","title":"AutowareV2X Documentation"},{"location":"#about-autowarev2x","text":"AutowareV2X is an open-source module that can be added onto the newest Autoware.universe to enable V2X communication. It utilizes Vanetza as the protocol suite for ETSI C-ITS standards. We have also provided a working example of a CPM application, where Collective Perception Messages can be used to exchange perception information in Autoware.","title":"About AutowareV2X"},{"location":"#getting-started","text":"Installation pages explain the installation steps of AutowareV2X and its prerequisites. Tutorials pages provide several tutorials to follow after installation. Design pages explain the design concept and architecture of AutowareV2X. Support pages are the place to go if you need additional help.","title":"Getting started"},{"location":"about/document-build/","text":"","title":"Document build"},{"location":"design/","text":"Design # Warning More to come A V2X communication software stack called Vanetza is integrated into the standalone autonomous driving software stack, Autoware . The V2X stack and the autonomous driving stack can be decoupled, allowing other applications to utilize the V2X router as well. A high-level overview of the architecture is shown below. Autoware is responsible for the perception task, while Autoware_V2X manages the transmission and reception of messages over the V2X channel. Services that are necessary for the integration of Vanetza into Autoware were newly developed. The V2XApp is responsible for managing the various facilities such as DENM, CAM, CPM, while the V2XNode handles the conversion of information between the V2X messages and ROS2 messages.","title":"Design"},{"location":"design/#design","text":"Warning More to come A V2X communication software stack called Vanetza is integrated into the standalone autonomous driving software stack, Autoware . The V2X stack and the autonomous driving stack can be decoupled, allowing other applications to utilize the V2X router as well. A high-level overview of the architecture is shown below. Autoware is responsible for the perception task, while Autoware_V2X manages the transmission and reception of messages over the V2X channel. Services that are necessary for the integration of Vanetza into Autoware were newly developed. The V2XApp is responsible for managing the various facilities such as DENM, CAM, CPM, while the V2XNode handles the conversion of information between the V2X messages and ROS2 messages.","title":"Design"},{"location":"design/architecture/","text":"","title":"Architecture"},{"location":"how-to-guides/","text":"How-to-guides # Warning Under Construction","title":"How-to-guides"},{"location":"how-to-guides/#how-to-guides","text":"Warning Under Construction","title":"How-to-guides"},{"location":"installation/","text":"Installing AutowareV2X # AutowareV2X is used as an add-on module to the open-source autonomous driving stack called Autoware . Therefore, in order to properly use AutowareV2X, Autoware must first be installed on the system. You can install AutowareV2X directly onto a PC through the Source Installation or use it as a Docker container through the Docker Installation . Note In order to proceed with the Tutorials , you will need to continue with the Docker Installatioon .","title":"Installing AutowareV2X"},{"location":"installation/#installing-autowarev2x","text":"AutowareV2X is used as an add-on module to the open-source autonomous driving stack called Autoware . Therefore, in order to properly use AutowareV2X, Autoware must first be installed on the system. You can install AutowareV2X directly onto a PC through the Source Installation or use it as a Docker container through the Docker Installation . Note In order to proceed with the Tutorials , you will need to continue with the Docker Installatioon .","title":"Installing AutowareV2X"},{"location":"installation/docker-installation/","text":"Docker Installation # In order to run the simulations explained in the Tutorials section, you will need to proceed with the Docker installation. Note Also refer to Autoware's Docker Installation for the Docker-based installation of Autoware.universe. Installing Autoware (Docker version) # For the newest documentation for the Docker installation of Autoware, see their official documentation . In a nutshell, the following commands should work: git clone https://github.com/autowarefoundation/autoware.git autoware_docker cd autoware_docker # Install dependencies using Ansible ./setup-dev-env.sh docker # Make directory to store maps mkdir ~/autoware_map # Launch Autoware container (with NVIDIA GPU) rocker --nvidia --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda # Launch Autoware container (without NVIDIA GPU) rocker -e LIBGL_ALWAYS_SOFTWARE = 1 --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda Adding AutowareV2X # From here, run commands inside the container. Move into autoware_docker directory. cd autoware_docker Edit the autoware.repos file and add the following two repositories to the end. v2x/autoware_v2x: type: git url: git@github.com:tlab-wide/autoware_v2x.git version: main v2x/vanetza: type: git url: git@github.com:tlab-wide/vanetza.git version: socktap-cpm-tr103562 Update the repository mkdir src vcs import src < autoware.repos vcs pull src Install dependent ROS packages sudo apt update rosdep update rosdep install --from-paths . --ignore-src --rosdistro $ROS_DISTRO Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release","title":"Docker Installation"},{"location":"installation/docker-installation/#docker-installation","text":"In order to run the simulations explained in the Tutorials section, you will need to proceed with the Docker installation. Note Also refer to Autoware's Docker Installation for the Docker-based installation of Autoware.universe.","title":"Docker Installation"},{"location":"installation/docker-installation/#installing-autoware-docker-version","text":"For the newest documentation for the Docker installation of Autoware, see their official documentation . In a nutshell, the following commands should work: git clone https://github.com/autowarefoundation/autoware.git autoware_docker cd autoware_docker # Install dependencies using Ansible ./setup-dev-env.sh docker # Make directory to store maps mkdir ~/autoware_map # Launch Autoware container (with NVIDIA GPU) rocker --nvidia --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda # Launch Autoware container (without NVIDIA GPU) rocker -e LIBGL_ALWAYS_SOFTWARE = 1 --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda","title":"Installing Autoware (Docker version)"},{"location":"installation/docker-installation/#adding-autowarev2x","text":"From here, run commands inside the container. Move into autoware_docker directory. cd autoware_docker Edit the autoware.repos file and add the following two repositories to the end. v2x/autoware_v2x: type: git url: git@github.com:tlab-wide/autoware_v2x.git version: main v2x/vanetza: type: git url: git@github.com:tlab-wide/vanetza.git version: socktap-cpm-tr103562 Update the repository mkdir src vcs import src < autoware.repos vcs pull src Install dependent ROS packages sudo apt update rosdep update rosdep install --from-paths . --ignore-src --rosdistro $ROS_DISTRO Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release","title":"Adding AutowareV2X"},{"location":"installation/source-installation/","text":"Source Installation # Prerequisites # OS Ubuntu 20.04 Ubuntu 22.04 ROS ROS2 Galactic Installing Autoware # Refer to the Official Autoware Documentation for the newest installation procedures. In a nutshell, you can run the following commands: # Clone repository git clone https://github.com/autowarefoundation/autoware.git cd autoware # Install dependencies using Ansible ./setup-dev-env.sh # Use vcstool to import more repositories mkdir src vcs import src < autoware.repos # Install dependent ROS packages source /opt/ros/galactic/setup.bash rosdep update rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO # Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release Adding AutowareV2X # Edit the autoware.repos file and add the following two repositories to the end. v2x/autoware_v2x: type: git url: git@github.com:tlab-wide/autoware_v2x.git version: main v2x/vanetza: type: git url: git@github.com:tlab-wide/vanetza.git version: socktap-cpm-tr103562 Update the repository vcs import src < autoware.repos vcs pull src Install dependent ROS packages source /opt/ros/galactic/setup.bash rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release","title":"Source Installation"},{"location":"installation/source-installation/#source-installation","text":"","title":"Source Installation"},{"location":"installation/source-installation/#prerequisites","text":"OS Ubuntu 20.04 Ubuntu 22.04 ROS ROS2 Galactic","title":"Prerequisites"},{"location":"installation/source-installation/#installing-autoware","text":"Refer to the Official Autoware Documentation for the newest installation procedures. In a nutshell, you can run the following commands: # Clone repository git clone https://github.com/autowarefoundation/autoware.git cd autoware # Install dependencies using Ansible ./setup-dev-env.sh # Use vcstool to import more repositories mkdir src vcs import src < autoware.repos # Install dependent ROS packages source /opt/ros/galactic/setup.bash rosdep update rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO # Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"Installing Autoware"},{"location":"installation/source-installation/#adding-autowarev2x","text":"Edit the autoware.repos file and add the following two repositories to the end. v2x/autoware_v2x: type: git url: git@github.com:tlab-wide/autoware_v2x.git version: main v2x/vanetza: type: git url: git@github.com:tlab-wide/vanetza.git version: socktap-cpm-tr103562 Update the repository vcs import src < autoware.repos vcs pull src Install dependent ROS packages source /opt/ros/galactic/setup.bash rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release","title":"Adding AutowareV2X"},{"location":"support/","text":"Support # Contact: yuasabe[at]hongo.wide.ad.jp","title":"Support"},{"location":"support/#support","text":"Contact: yuasabe[at]hongo.wide.ad.jp","title":"Support"},{"location":"support/docs-guide/","text":"How to generate Documentation # mkdocs # Run development server. mkdocs serve Deploy to gh-pages. mkdocs gh-deploy Doxygen # doxygen Doxyfile","title":"How to generate Documentation"},{"location":"support/docs-guide/#how-to-generate-documentation","text":"","title":"How to generate Documentation"},{"location":"support/docs-guide/#mkdocs","text":"Run development server. mkdocs serve Deploy to gh-pages. mkdocs gh-deploy","title":"mkdocs"},{"location":"support/docs-guide/#doxygen","text":"doxygen Doxyfile","title":"Doxygen"},{"location":"tutorials/","text":"Tutorials # AutowareV2X can be first verified using Autoware's Planning Simulator . Running Autoware in the Planning Simulator Then, after you are familiar with how AutowareV2X works, you can use actual devices to test AutowareV2X. Running AutowareV2X on Actual Devices","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"AutowareV2X can be first verified using Autoware's Planning Simulator . Running Autoware in the Planning Simulator Then, after you are familiar with how AutowareV2X works, you can use actual devices to test AutowareV2X. Running AutowareV2X on Actual Devices","title":"Tutorials"},{"location":"tutorials/actual-devices/","text":"Running AutowareV2X on Actual Devices # Warning Under Construction","title":"Running AutowareV2X on Actual Devices"},{"location":"tutorials/actual-devices/#running-autowarev2x-on-actual-devices","text":"Warning Under Construction","title":"Running AutowareV2X on Actual Devices"},{"location":"tutorials/planning-simulation/","text":"Running AutowareV2X in the Planning Simulator # Simulations can be an easy way of verifying the functionality of AutowareV2X before an actual field test. We will use Autoware's Planning Simulator here and add connectivity to it with AutowareV2X. Note Make sure you have completed Autoware's Planning Simulator Tutorial before continuing. Here, since we want to test both the sending and receiving of information through AutowareV2X, we will need at least two AutowareV2X instances. For this, we will use a Docker-based environment. The Docker environment to create # We will be creating the Docker environment as depicted in the figure below. There will be two Docker containers, each of which includes Autoware.universe and AutowareV2X. They will both be a part of the Docker network called v2x_net with the subnet 10.0.0.0/24 . Create a Docker network for V2X communication # docker network create --driver = bridge --subnet = 10 .0.0.0/24 v2x_net -o com.docker.network.bridge.name = \"v2x_net\" Launch two Autoware containers # # In one terminal, use rocker to launch container \"autoware_1\" rocker --nvidia --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map --network = v2x_net --ip 10 .0.0.2 --name autoware_1 --hostname autoware_1 -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda # In another terminal, use rocker to launch container \"autoware_2\" rocker --nvidia --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map --network = v2x_net --ip 10 .0.0.3 --name autoware_2 --hostname autoware_2 -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda Run Planning Simulator # Run the Planning Simulator in both autoware_1 and autoware_2 . source ~/autoware_docker/install/setup.bash ros2 launch autoware_launch planning_simulator.launch.xml map_path:=$HOME/autoware_map/sample-map-planning vehicle_model:=sample_vehicle sensor_model:=sample_sensor_kit Run AutowareV2X # In another terminal, connect to the autoware_1 and autoware_2 containers, and start AutowareV2X in both of them. source ~/autoware_docker/install/setup.bash ros2 launch autoware_v2x v2x.launch.xml network_interface:=eth1","title":"Running AutowareV2X in the Planning Simulator"},{"location":"tutorials/planning-simulation/#running-autowarev2x-in-the-planning-simulator","text":"Simulations can be an easy way of verifying the functionality of AutowareV2X before an actual field test. We will use Autoware's Planning Simulator here and add connectivity to it with AutowareV2X. Note Make sure you have completed Autoware's Planning Simulator Tutorial before continuing. Here, since we want to test both the sending and receiving of information through AutowareV2X, we will need at least two AutowareV2X instances. For this, we will use a Docker-based environment.","title":"Running AutowareV2X in the Planning Simulator"},{"location":"tutorials/planning-simulation/#the-docker-environment-to-create","text":"We will be creating the Docker environment as depicted in the figure below. There will be two Docker containers, each of which includes Autoware.universe and AutowareV2X. They will both be a part of the Docker network called v2x_net with the subnet 10.0.0.0/24 .","title":"The Docker environment to create"},{"location":"tutorials/planning-simulation/#create-a-docker-network-for-v2x-communication","text":"docker network create --driver = bridge --subnet = 10 .0.0.0/24 v2x_net -o com.docker.network.bridge.name = \"v2x_net\"","title":"Create a Docker network for V2X communication"},{"location":"tutorials/planning-simulation/#launch-two-autoware-containers","text":"# In one terminal, use rocker to launch container \"autoware_1\" rocker --nvidia --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map --network = v2x_net --ip 10 .0.0.2 --name autoware_1 --hostname autoware_1 -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda # In another terminal, use rocker to launch container \"autoware_2\" rocker --nvidia --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map --network = v2x_net --ip 10 .0.0.3 --name autoware_2 --hostname autoware_2 -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda","title":"Launch two Autoware containers"},{"location":"tutorials/planning-simulation/#run-planning-simulator","text":"Run the Planning Simulator in both autoware_1 and autoware_2 . source ~/autoware_docker/install/setup.bash ros2 launch autoware_launch planning_simulator.launch.xml map_path:=$HOME/autoware_map/sample-map-planning vehicle_model:=sample_vehicle sensor_model:=sample_sensor_kit","title":"Run Planning Simulator"},{"location":"tutorials/planning-simulation/#run-autowarev2x","text":"In another terminal, connect to the autoware_1 and autoware_2 containers, and start AutowareV2X in both of them. source ~/autoware_docker/install/setup.bash ros2 launch autoware_v2x v2x.launch.xml network_interface:=eth1","title":"Run AutowareV2X"}]}