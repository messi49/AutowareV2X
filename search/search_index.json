{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AutowareV2X Documentation # About AutowareV2X # AutowareV2X is an open-source module that can be added onto the newest Autoware.universe to enable V2X communication. It utilizes Vanetza as the protocol suite for ETSI C-ITS standards. We have also provided a working example of a CPM application, where Collective Perception Messages can be used to exchange perception information in Autoware. Getting started # Installation pages explain the installation steps of AutowareV2X and its prerequisites. Tutorials pages provide several tutorials to follow after installation. Design pages explain the design concept and architecture of AutowareV2X. Support pages are the place to go if you need additional help.","title":"Introduction"},{"location":"#autowarev2x-documentation","text":"","title":"AutowareV2X Documentation"},{"location":"#about-autowarev2x","text":"AutowareV2X is an open-source module that can be added onto the newest Autoware.universe to enable V2X communication. It utilizes Vanetza as the protocol suite for ETSI C-ITS standards. We have also provided a working example of a CPM application, where Collective Perception Messages can be used to exchange perception information in Autoware.","title":"About AutowareV2X"},{"location":"#getting-started","text":"Installation pages explain the installation steps of AutowareV2X and its prerequisites. Tutorials pages provide several tutorials to follow after installation. Design pages explain the design concept and architecture of AutowareV2X. Support pages are the place to go if you need additional help.","title":"Getting started"},{"location":"quickstart/","text":"Quickstart # Start AutowareV2X cd workspace/autoware_v2x.proj . install/setup.bash . setup_source ros2 launch autoware_v2x v2x.launch.xml network_interface:=eth1","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"Start AutowareV2X cd workspace/autoware_v2x.proj . install/setup.bash . setup_source ros2 launch autoware_v2x v2x.launch.xml network_interface:=eth1","title":"Quickstart"},{"location":"about/document-build/","text":"","title":"Document build"},{"location":"design/","text":"Design #","title":"Design"},{"location":"design/#design","text":"","title":"Design"},{"location":"design/architecture/","text":"","title":"Architecture"},{"location":"how-to-guides/","text":"How-to-guides #","title":"How-to-guides"},{"location":"how-to-guides/#how-to-guides","text":"","title":"How-to-guides"},{"location":"installation/","text":"Installing AutowareV2X # AutowareV2X is used as an add-on module to the open-source autonomous driving stack called Autoware . Therefore, in order to properly use AutowareV2X, Autoware must first be installed on the system. Prerequisites # OS Ubuntu 20.04 Ubuntu 22.04 ROS ROS2 Galactic Installing Autoware # Refer to the Official Autoware Documentation for the newest installation procedures. In a nutshell, you can run the following commands: # Clone repository git clone https://github.com/autowarefoundation/autoware.git cd autoware # Install dependencies using Ansible ./setup-dev-env.sh # Use vcstool to import more repositories mkdir src vcs import src < autoware.repos # Install dependent ROS packages source /opt/ros/galactic/setup.bash rosdep update rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO # Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release Adding AutowareV2X # Edit the autoware.repos file and add the following two repositories to the end. v2x/autoware_v2x: type: git url: git@github.com:tlab-wide/autoware_v2x.git version: main v2x/vanetza: type: git url: git@github.com:tlab-wide/vanetza.git version: socktap-cpm-tr103562 Update the repository vcs import src < autoware.repos vcs pull src Install dependent ROS packages source /opt/ros/galactic/setup.bash rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release","title":"Installing AutowareV2X"},{"location":"installation/#installing-autowarev2x","text":"AutowareV2X is used as an add-on module to the open-source autonomous driving stack called Autoware . Therefore, in order to properly use AutowareV2X, Autoware must first be installed on the system.","title":"Installing AutowareV2X"},{"location":"installation/#prerequisites","text":"OS Ubuntu 20.04 Ubuntu 22.04 ROS ROS2 Galactic","title":"Prerequisites"},{"location":"installation/#installing-autoware","text":"Refer to the Official Autoware Documentation for the newest installation procedures. In a nutshell, you can run the following commands: # Clone repository git clone https://github.com/autowarefoundation/autoware.git cd autoware # Install dependencies using Ansible ./setup-dev-env.sh # Use vcstool to import more repositories mkdir src vcs import src < autoware.repos # Install dependent ROS packages source /opt/ros/galactic/setup.bash rosdep update rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO # Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE = Release","title":"Installing Autoware"},{"location":"installation/#adding-autowarev2x","text":"Edit the autoware.repos file and add the following two repositories to the end. v2x/autoware_v2x: type: git url: git@github.com:tlab-wide/autoware_v2x.git version: main v2x/vanetza: type: git url: git@github.com:tlab-wide/vanetza.git version: socktap-cpm-tr103562 Update the repository vcs import src < autoware.repos vcs pull src Install dependent ROS packages source /opt/ros/galactic/setup.bash rosdep install -y --from-paths src --ignore-src --rosdistro $ROS_DISTRO Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release","title":"Adding AutowareV2X"},{"location":"installation/docker-installation/","text":"Docker Installation # In order to run the simulations explained in the Tutorials section, you will need to proceed with the Docker installation. Installing Autoware (Docker version) # For the newest documentation for the Docker installation of Autoware, see their official documentation . In a nutshell, the following commands should work: git clone https://github.com/autowarefoundation/autoware.git autoware_docker cd autoware_docker # Install dependencies using Ansible ./setup-dev-env.sh docker # Make directory to store maps mkdir ~/autoware_map # Launch Autoware container rocker --nvidia --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda Adding AutowareV2X # From here, run commands inside the container. Move into autoware_docker directory. cd autoware_docker Edit the autoware.repos file and add the following two repositories to the end. v2x/autoware_v2x: type: git url: git@github.com:tlab-wide/autoware_v2x.git version: main v2x/vanetza: type: git url: git@github.com:tlab-wide/vanetza.git version: socktap-cpm-tr103562 Update the repository vcs import src < autoware.repos vcs pull src Install dependent ROS packages sudo apt update rosdep update rosdep install --from-paths . --ignore-src --rosdistro $ROS_DISTRO Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release","title":"Docker Installation"},{"location":"installation/docker-installation/#docker-installation","text":"In order to run the simulations explained in the Tutorials section, you will need to proceed with the Docker installation.","title":"Docker Installation"},{"location":"installation/docker-installation/#installing-autoware-docker-version","text":"For the newest documentation for the Docker installation of Autoware, see their official documentation . In a nutshell, the following commands should work: git clone https://github.com/autowarefoundation/autoware.git autoware_docker cd autoware_docker # Install dependencies using Ansible ./setup-dev-env.sh docker # Make directory to store maps mkdir ~/autoware_map # Launch Autoware container rocker --nvidia --x11 --user --volume $HOME /autoware_docker --volume $HOME /autoware_map -- ghcr.io/autowarefoundation/autoware-universe:latest-cuda","title":"Installing Autoware (Docker version)"},{"location":"installation/docker-installation/#adding-autowarev2x","text":"From here, run commands inside the container. Move into autoware_docker directory. cd autoware_docker Edit the autoware.repos file and add the following two repositories to the end. v2x/autoware_v2x: type: git url: git@github.com:tlab-wide/autoware_v2x.git version: main v2x/vanetza: type: git url: git@github.com:tlab-wide/vanetza.git version: socktap-cpm-tr103562 Update the repository vcs import src < autoware.repos vcs pull src Install dependent ROS packages sudo apt update rosdep update rosdep install --from-paths . --ignore-src --rosdistro $ROS_DISTRO Build the workspace colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=Release","title":"Adding AutowareV2X"},{"location":"support/","text":"Support # Contact: yuasabe[at]hongo.wide.ad.jp","title":"Support"},{"location":"support/#support","text":"Contact: yuasabe[at]hongo.wide.ad.jp","title":"Support"},{"location":"tutorials/","text":"Tutorials # Simulations can be an easy way of verifying the functionality of AutowareV2X before an actual field test. Here, since we want to test both the sending and receiving of information through AutowareV2X, we will need at least two AutowareV2X instances. For this, we will use a Docker-based environment.","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"Simulations can be an easy way of verifying the functionality of AutowareV2X before an actual field test. Here, since we want to test both the sending and receiving of information through AutowareV2X, we will need at least two AutowareV2X instances. For this, we will use a Docker-based environment.","title":"Tutorials"}]}